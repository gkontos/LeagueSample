<project name="TeamSports" basedir="." default="war" 
		xmlns:artifact="antlib:org.apache.maven.artifact.ant"
		xmlns:liquibase="antlib:liquibase.integration.ant">

	<tstamp>
		<format property="file.time" pattern="yyyyDDddhhmm"/>
	</tstamp>
	
	<property name="src.dir" value="src" />

	<property name="resources.dir" value="resource" />
	<property name="build.dir" value="build" />
	<property name="test.dir" value="${src.dir}" />
	<property name="config.dir" value="config" />
	<property name="test-output.dir" value="test-result" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="lib.dir" value="lib" />
	<property name="war.dir" value="dist" />
	<property name="run.lib" value="${build.dir}/WEB-INF/lib" />
<!--	<property name="build.type" value="_test" /> -->
	<!-- test or prod or blank-->
	<property name="main-class" value="com.idl.main.MainApp" />
	<property name="app.path" value="/${ant.project.name}" />
	<property name="jdk.home" value="C:/Program Files/Java/jdk1.8.0_45" />
	<property name="tomcat.home" value="C:/Program Files/Apache Software Foundation/tomcat-8.0.26" />
	<property name="liquibase.path" value="C:/Users/greg/.m2/repository/org/liquibase/liquibase-core/3.3.2/liquibase-core-3.3.2.jar" />
	<property name="db.driver" value="com.mysql.jdbc.Driver"/>
	<property name="db.user" value="tsfdev"/>
	<property name="db.password" value="!tsfdev!"/>
	<property name="test_db.url" value="jdbc:mysql://localhost:3306/tsf-dev"/>
	<property name="prod_db.url" value="jdbc:mysql://localhost:3306/tsf"/>
	<property name="prev_db.url" value="jdbc:mysql://localhost:3306/tsf-previous"/>
	<property name="db.masterchangelogfile" value="${config.dir}/db/tsf-changelog-master.xml"/>
	<property name="db.diffchangelogfile" value="${config.dir}/db/update/db-changelog-${file.time}.xml"/>

	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
	<path id="liquibase-tasks.classpath" path="${liquibase.path}" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
	            uri="antlib:org.apache.maven.artifact.ant" 
	            classpathref="maven-ant-tasks.classpath" />
	<taskdef resource="liquibase/integration/ant/antlib.xml" 
			uri="antlib:liquibase.integration.ant"
			classpathref="liquibase-tasks.classpath" />
	
	<!-- Load pom.xml for dependencies -->
	<artifact:pom id="pomfile" file="pom.xml" />
	<artifact:dependencies pathId="dependency.classpath" filesetId="mvn-dependencies" versionsId="dependency.versions" pomRefId="pomfile" />

	<path id="build.classpath">
		
		<fileset dir="WebContent/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
		
		<fileset dir="${tomcat.home}/lib">
			<include name="**/*.jar" />
		</fileset>
		
		<fileset refid="mvn-dependencies" />
		
	</path>

	<target name="clean" description="cleaning">
		<delete dir="${build.dir}" />
		<delete dir="${war.dir}" />
		<!-- HACK : For some reason, running the wsimport task fails if the run.lib does not exist -->
		<mkdir dir="${run.lib}" />
	</target>

	<target name="move_files">
		<copy todir="${run.lib}">

			<fileset dir="${lib.dir}">
				<exclude name="maven-ant-tasks**" />
			</fileset>
		</copy>

		<copy todir="${run.lib}">
			<fileset refid="mvn-dependencies" />
			<mapper classpathref="maven-ant-tasks.classpath" classname="org.apache.maven.artifact.ant.VersionMapper" from="${dependency.versions}" to="flatten" />
		</copy>

		<copy todir="${classes.dir}">
				<fileset dir="${config.dir}/${build.type}">
					<include name="*.xml" />
					<include name="*.properties" />
				</fileset>
			</copy>
		<copy todir="${classes.dir}/db">
			<fileset dir="${config.dir}/db"/>
		</copy>
	</target>

	<target name="compile" description="Compiling">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}">
			<classpath refid="build.classpath" />
		</javac>
	</target>

	<target name="war" depends="compile, move_files" description="Creating .war">
		<!-- move config files so they are included in the jar 
		<copy todir="${classes.dir}">
			<fileset dir="config">
				<include name="**/*.*" />
			</fileset>
		</copy>-->
		<mkdir dir="${war.dir}" />
		<war destfile="${war.dir}/${ant.project.name}.war" webxml="WebContent/WEB-INF/web.xml">
			<fileset dir="WebContent">
				<include name="**/*.*" />
			</fileset>
			<lib dir="${run.lib}" />
			<classes dir="build/classes" />
			<exclude name="**/test*" />
		</war>

	</target>
	<!---  TOMCAT MANAGER -->
	<target name="deploy-test" depends="set-test-vars, clean, war, context.status, undeploy, deploy">
		<echo message="deploying to test" />
	</target>

	<target name="deploy-prod" depends="set-prod-vars, clean, war, context.status, undeploy, deploy">
		<echo message="deploying to prod" />
	</target>

	<target name="set-test-vars">
		<property name="build.type" value="test" />
		<property name="mgr.url" value="http://idlsrv-ship200:8080/manager/text" />
		<property name="username" value="plaids" />
		<property name="password" value="admin-test" />
	</target>

	<target name="set-prod-vars">
		<property name="build.type" value="prod" />
		<property name="mgr.url" value="http://idlsrv-ship01:8080/manager/text" />
		<property name="username" value="plaids" />
		<property name="password" value="admin-test" />
	</target>

	<path id="catalina-ant.classpath">
	<fileset dir="${tomcat.home}/lib">
		<include name="**.jar" />
	</fileset>
	</path>
	
	<!-- Configure the custom Ant tasks for the Manager application -->
	  <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask">
	  		<classpath refid="catalina-ant.classpath"/>
	  </taskdef>
	  <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask">
  		<classpath refid="catalina-ant.classpath"/>
 	</taskdef>
	  <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask">
  		<classpath refid="catalina-ant.classpath"/>
  </taskdef>
	<taskdef name="stop"  classname="org.apache.catalina.ant.StopTask">
	  		<classpath refid="catalina-ant.classpath"/>
	  </taskdef>
	<taskdef name="start"  classname="org.apache.catalina.ant.StartTask">
		  		<classpath refid="catalina-ant.classpath"/>
		  </taskdef>
	<taskdef name="list"      classname="org.apache.catalina.ant.ListTask">
		<classpath refid="catalina-ant.classpath"/>
	</taskdef>
	
	<target name="deploy" description="Install web application" depends="compile">
		<echo message="deploying ${app.path} at ${mgr.url}"/>
		<deploy url="${mgr.url}" username="${username}" password="${password}" path="${app.path}" war="file:${war.dir}/${ant.project.name}.war" />
	</target>

	<target name="reload" description="Reload web application" depends="compile">
		<reload url="${mgr.url}" username="${username}" password="${password}" path="${app.path}" />
	</target>

	<target name="undeploy" description="Remove web application" unless="context.notInstalled">
		<echo message="undeploying ${app.path} at ${mgr.url}"/>
		<undeploy url="${mgr.url}" username="${username}" password="${password}" path="${app.path}" />
	</target>

	<target name="stop" description="Remove web application">
			<stop url="${mgr.url}" username="${username}" password="${password}" path="${app.path}" />
		</target>
	<target name="start" description="Remove web application">
			<start url="${mgr.url}" username="${username}" password="${password}" path="${app.path}" />
		</target>

	<target name="context.status">
	        <property name="running" value="${app.path}:running"/>
	        <property name="stopped" value="${app.path}:stopped"/>

	        <list url="${mgr.url}"
	            outputproperty="ctx.status"
	            username="${username}"
	            password="${password}">
	        </list>

	        <condition property="context.running">
	            <contains string="${ctx.status}" substring="${running}"/>
	        </condition>
	        <condition property="context.stopped">
	            <contains string="${ctx.status}" substring="${stopped}"/>
	        </condition>
	        <condition property="context.notInstalled">
	            <and>
	                <isfalse value="${context.running}"/>
	                <isfalse value="${context.stopped}"/>
	            </and>
	        </condition>
	        <condition property="context.deployable">
	            <or>
	                <istrue value="${context.notInstalled}"/>
	                <and>
	                    <istrue value="${context.running}"/>
	                    <istrue value="${mgr.update}"/>
	                </and>
	                <and>
	                    <istrue value="${context.stopped}"/>
	                    <istrue value="${mgr.update}"/>
	                </and>
	            </or>
	        </condition>
	        <condition property="context.undeployable">
	            <or>
	                <istrue value="${context.running}"/>
	                <istrue value="${context.stopped}"/>
	            </or>
	        </condition>
	    </target>
	
	<!-- LIQUIBASE -->
	<liquibase:database driver="${db.driver}" 
									url="${prod_db.url}" 
									user="${db.user}" 
									password="${db.password}"
									id="proddb"/>
	
	<liquibase:database driver="${db.driver}" 
									url="${test_db.url}" 
									user="${db.user}" 
									password="${db.password}"
									id="testdb"/>
	<liquibase:database driver="${db.driver}" 
									url="${prev_db.url}" 
									user="${db.user}" 
									password="${db.password}"
									id="prevdb"/>
	<!--
	Updates to production schema will happen via spring configuration
	-->
	<target name="update_prev_db">
	<liquibase:updateDatabase changeLogFile="${db.masterchangelogfile}" 
							  dropFirst="true" 
							  classpathref="build.classpath"
								databaseref="prevdb">
	</liquibase:updateDatabase>
	</target>
 
	<!-- runs the diff against a database created from the changeLog files -->
	<target name="save_db_diff" depends="update_prev_db">
	<liquibase:diffDatabaseToChangeLog classpathref="build.classpath" 
			databaseref="prevdb" 
			referencedatabaseref="testdb"
			outputDefaultSchema="false"
			outputDefaultCatalog="false">
	    <liquibase:xml outputFile="${db.diffchangelogfile}" encoding="UTF-8">
		</liquibase:xml>
	</liquibase:diffDatabaseToChangeLog>
		<input
		    message="Remember to add the logicalFilePath attribute to the change log files.  Press Return key to continue..."
		  />
		<!-- TODO : set the path such that it works with ant, eclipse, and deployed applications 
			currently the file path is /db/update/<file_name> if run from eclipse, 
			config/db/update/<file_name> from ant, and likely to be /db/update/<file_name> 
			from deployed applications. -->
	</target>
	
	<!-- runs the diff against test to generate a change log containing changed data -->
		<target name="generateDataDiff" >
		<liquibase:generateChangeLog classpathref="build.classpath" 
				databaseref="testdb" diffTypes="data">
		    <liquibase:xml outputFile="${db.diffchangelogfile}" encoding="UTF-8">
			</liquibase:xml>
		</liquibase:generateChangeLog>
			<input
			    message="Remember to add the logicalFilePath attribute to the change log files.  Press Return key to continue..."
			  />
			<!-- TODO : set the path such that it works with ant, eclipse, and deployed applications 
				currently the file path is /db/update/<file_name> if run from eclipse, 
				config/db/update/<file_name> from ant, and likely to be /db/update/<file_name> 
				from deployed applications. -->
		</target>
	
	<target name="sync_test_db">
		<liquibase:changeLogSync changeLogFile="${db.masterchangelogfile}" databaseref="testdb" classpathref="build.classpath" >
		</liquibase:changeLogSync>
	</target>
	
	<target name="start_test_db">
	<liquibase:updateDatabase changeLogFile="${db.masterchangelogfile}" 
							  dropFirst="true" 
							  classpathref="build.classpath"
								databaseref="testdb">
	</liquibase:updateDatabase>
	</target>
</project>
